/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.VolunteerRole;

import Business.Donation.Donation;
import Business.Donation.DonationDirectory;
import Business.EcoSystem;
import Business.NGOVolunteer.Volunteer;
import Business.Reqorder.Reqorder;
import Business.Reqorder.ReqorderDirectory;
import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sowmyachinimilli
 */
public class VolunteerWorkAreaPanel extends javax.swing.JPanel {

    /**
     * Creates new form VolunteerWorkAreaPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount userAccount;
    JPanel jp;
    JSplitPane jsp;
    String name;
    public VolunteerWorkAreaPanel(JPanel userProcessContainer,EcoSystem ecosystem, UserAccount userAccount, JPanel jp, JSplitPane jsp) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        this.jp = jp;
        this.jsp = jsp;
        name = userAccount.getEmployee().getName();
        populatePickupTable();
       // populateDelTable();
        if(ecosystem.getDonatDirectory()== null){
         ecosystem.setDonatDirectory(new DonationDirectory());
        }
        if(ecosystem.getReqorderDirectory()== null){
         ecosystem.setReqorderDirectory( new ReqorderDirectory());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblReqDel = new javax.swing.JTable();
        lblDonProfileTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDonPick = new javax.swing.JTable();
        lblDonProfileTitle1 = new javax.swing.JLabel();
        lblDonProfileTitle2 = new javax.swing.JLabel();
        btnAcceptPickup = new javax.swing.JButton();
        btnProcessPickup = new javax.swing.JButton();
        btnAcceptDel = new javax.swing.JButton();
        btnProcessDel = new javax.swing.JButton();

        tblReqDel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Request Id", "Requestor", "Address", "City", "Zip Code", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblReqDel);

        lblDonProfileTitle.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDonProfileTitle.setText("Food Cloud Requests");

        tblDonPick.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Donation ID", "Donor", "Address", "City", "Zip Code", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblDonPick);

        lblDonProfileTitle1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        lblDonProfileTitle1.setText("Pickup Requests");

        lblDonProfileTitle2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        lblDonProfileTitle2.setText("Delivery Requests");

        btnAcceptPickup.setText("Accept");
        btnAcceptPickup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptPickupActionPerformed(evt);
            }
        });

        btnProcessPickup.setText("Process");
        btnProcessPickup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessPickupActionPerformed(evt);
            }
        });

        btnAcceptDel.setText("Accept");
        btnAcceptDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptDelActionPerformed(evt);
            }
        });

        btnProcessDel.setText("Process");
        btnProcessDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAcceptPickup)
                        .addGap(18, 18, 18)
                        .addComponent(btnProcessPickup)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAcceptDel)
                        .addGap(18, 18, 18)
                        .addComponent(btnProcessDel)
                        .addGap(55, 55, 55))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(414, 414, 414)
                        .addComponent(lblDonProfileTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblDonProfileTitle2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblDonProfileTitle1)))
                .addContainerGap(438, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblDonProfileTitle)
                .addGap(16, 16, 16)
                .addComponent(lblDonProfileTitle1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAcceptPickup)
                    .addComponent(btnProcessPickup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(lblDonProfileTitle2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAcceptDel)
                    .addComponent(btnProcessDel))
                .addGap(64, 64, 64))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptPickupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptPickupActionPerformed

        int selectedRow = tblDonPick.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }

        Donation dt = (Donation) tblDonPick.getValueAt(selectedRow, 0);
        //        order.setDeliveryMan(userAccount.getEmployee().getName());
        if(dt.getDonatStatus().equals("Assigned to Volunteer")){
        dt.setDonatStatus("Order Picked up");
        }
        else{
            JOptionPane.showMessageDialog(null,"Order is accpeted or completed already");
        }
        populatePickupTable();
    }//GEN-LAST:event_btnAcceptPickupActionPerformed

    private void btnProcessPickupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessPickupActionPerformed

        int selectedRow = tblDonPick.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }

        Donation dt = (Donation) tblDonPick.getValueAt(selectedRow, 0);
        if(dt.getDonatStatus().equals("Delivered")) {
            JOptionPane.showMessageDialog(null, "Already Delivered.");
            return;
        }
        else if(dt.getDonatStatus().equals("Order Picked up")){
            dt.setDonatStatus("Delivered");
            for(Volunteer v:ecosystem.getVolDir().getVolunteerList()){
            if(v.getVolName().equals(name)){
                v.setVolAvail("Yes");
            }
            }
            JOptionPane.showMessageDialog(null, "Delivered Order with id : " + dt.getDonatId());
            populatePickupTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please accept the order first");
        }

        //orderDirectory.getOrderDirectory().remove(order);

    }//GEN-LAST:event_btnProcessPickupActionPerformed

    private void btnAcceptDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptDelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblReqDel.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }

        Reqorder rq = (Reqorder) tblReqDel.getValueAt(selectedRow, 0);
        //        order.setDeliveryMan(userAccount.getEmployee().getName());
        if(rq.getReqOrderStatus().equals("Assigned to Volunteer")){
        rq.setReqOrderStatus("Order Picked up");
        }
        else{
            JOptionPane.showMessageDialog(null,"Order is accpeted or completed already");
        }
        populateDelTable();
        
    }//GEN-LAST:event_btnAcceptDelActionPerformed

    private void btnProcessDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessDelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblReqDel.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }

        Reqorder rq = (Reqorder) tblReqDel.getValueAt(selectedRow, 0);
        if(rq.getReqOrderStatus().equals("Delivered")) {
            JOptionPane.showMessageDialog(null, "Already Delivered.");
            return;
        }
        else if(rq.getReqOrderStatus().equals("Order Picked up")){
            rq.setReqOrderStatus("Delivered");
            for(Volunteer v:ecosystem.getVolDir().getVolunteerList()){
            if(v.getVolName().equals(name)){
                v.setVolAvail("Yes");
            }
            }
            JOptionPane.showMessageDialog(null, "Delivered Order with id : " + rq.getReqOrderId());
            populateDelTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please accept the order first");
        }
    }//GEN-LAST:event_btnProcessDelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptDel;
    private javax.swing.JButton btnAcceptPickup;
    private javax.swing.JButton btnProcessDel;
    private javax.swing.JButton btnProcessPickup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDonProfileTitle;
    private javax.swing.JLabel lblDonProfileTitle1;
    private javax.swing.JLabel lblDonProfileTitle2;
    private javax.swing.JTable tblDonPick;
    private javax.swing.JTable tblReqDel;
    // End of variables declaration//GEN-END:variables

    private void populatePickupTable() {
       DefaultTableModel model = (DefaultTableModel) tblDonPick.getModel();
        model.setRowCount(0);
        for(Donation dt: ecosystem.getDonatDirectory().getDonatList()){
            if(dt.getDonatVol().equals(userAccount.getEmployee().getName())){
                Object[] row = new Object[6];
                row[0] =dt;
                row[1] =dt.getDonatDname();
                row[2] =dt.getDonatAdd();
                row[3] =dt.getDonatCity();
                row[4] =dt.getDonatZip();
                row[5] =dt.getDonatStatus();     
                model.addRow(row);
            }
        }
    }

    private void populateDelTable() {
        DefaultTableModel model = (DefaultTableModel) tblReqDel.getModel();
        model.setRowCount(0);
        for(Reqorder rq: ecosystem.getReqorderDirectory().getReqOrderList()){
           Object[] row = new Object[6];
           row[0] =rq;
           row[1] =rq.getReqName();
           row[2] =rq.getReqAdd();
           row[3] =rq.getReqCity();
           row[4] =rq.getReqZip();
           row[5] =rq.getReqOrderStatus();
           model.addRow(row);
        }
    }
}
