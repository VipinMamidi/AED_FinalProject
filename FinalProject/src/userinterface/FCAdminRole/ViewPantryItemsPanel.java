/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.FCAdminRole;

import Business.EcoSystem;
import Business.FCPantry.FCPantryItems;
import Business.FCPantry.FCPantryItemsDirectory;
import Business.UserAccount.UserAccount;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sowmyachinimilli
 */
public class ViewPantryItemsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPantryItemsPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount userAcc;
    FCPantryItemsDirectory fcpid;
    String FCPname;
    public ViewPantryItemsPanel(JPanel userProcessContainer,EcoSystem ecosystem,UserAccount userAcc) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.userAcc = userAcc;
        populatePantryItemsTable();
        //FCPname = ecosystem.getFCPDirectory()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddWHTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblitems = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblWHname = new javax.swing.JLabel();
        txtWHname = new javax.swing.JTextField();
        lblFCPname = new javax.swing.JLabel();
        txtFCPname = new javax.swing.JTextField();
        lblFCPmg = new javax.swing.JLabel();
        txtFCPmg = new javax.swing.JTextField();
        lblFDitem = new javax.swing.JLabel();
        txtFDitem = new javax.swing.JTextField();
        lblFDitem1 = new javax.swing.JLabel();
        txtItemquan = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        lblitemId = new javax.swing.JLabel();
        lblitemId1 = new javax.swing.JLabel();

        lblAddWHTitle.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblAddWHTitle.setText("View/Modify Pantry Items");

        tblitems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Warehouse Name", "Pantry Name", "Pantry Manager", "Food Item", "Item Quantity"
            }
        ));
        jScrollPane1.setViewportView(tblitems);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblWHname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblWHname.setText("Warehouse Name");

        txtWHname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtWHname.setPreferredSize(new java.awt.Dimension(150, 25));
        txtWHname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWHnameFocusLost(evt);
            }
        });
        txtWHname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWHnameKeyReleased(evt);
            }
        });

        lblFCPname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFCPname.setText("Pantry Name");

        txtFCPname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFCPname.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFCPname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFCPnameFocusLost(evt);
            }
        });
        txtFCPname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFCPnameKeyReleased(evt);
            }
        });

        lblFCPmg.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFCPmg.setText("Pantry Manager");

        txtFCPmg.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFCPmg.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFCPmg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFCPmgFocusLost(evt);
            }
        });
        txtFCPmg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFCPmgKeyReleased(evt);
            }
        });

        lblFDitem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFDitem.setText("Food Item");

        txtFDitem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFDitem.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFDitem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFDitemFocusLost(evt);
            }
        });
        txtFDitem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFDitemKeyReleased(evt);
            }
        });

        lblFDitem1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFDitem1.setText("Item Quantity");

        txtItemquan.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtItemquan.setPreferredSize(new java.awt.Dimension(150, 25));
        txtItemquan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemquanFocusLost(evt);
            }
        });
        txtItemquan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemquanKeyReleased(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblitemId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblitemId.setText("Selected Item Id:");

        lblitemId1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblitemId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblitemId1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(lblAddWHTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFCPname)
                            .addComponent(lblWHname)
                            .addComponent(lblFCPmg)
                            .addComponent(lblFDitem)
                            .addComponent(lblFDitem1))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtWHname, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFCPname, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFCPmg, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFDitem, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemquan, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(330, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddWHTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(btnEdit)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblitemId)
                            .addComponent(lblitemId1))))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWHname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWHname))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFCPname)
                    .addComponent(txtFCPname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFCPmg)
                    .addComponent(txtFCPmg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFDitem)
                    .addComponent(txtFDitem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFDitem1)
                    .addComponent(txtItemquan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(btnUpdate)
                .addContainerGap(104, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblitems.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a record to Edit");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblitems.getModel();
        FCPantryItems selectedFCPI = (FCPantryItems)model.getValueAt(selectedRowIndex, 0);
        lblitemId1.setText(selectedFCPI.getFcpitemid());
        txtWHname.setText(selectedFCPI.getFcpWHname());
        txtFCPname.setText(selectedFCPI.getPantryName());
        txtFCPmg.setText(selectedFCPI.getPantryManager());
        txtFDitem.setText(selectedFCPI.getFoodItem());
        txtItemquan.setText(String.valueOf(selectedFCPI.getFoodQuan()));
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblitems.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a record to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblitems.getModel();
        FCPantryItems selectedFCPI = (FCPantryItems)model.getValueAt(selectedRowIndex, 0);
        /* // First delete the customer from employee
        this.system.getEmployeeDirectory().deleteEmployee(selectedRest.getResManagerName());
        // And thne delete the userAccount
        this.system.getUserAccountDirectory().deleteUserAcc(
            this.system.getRestaurantDirectory().getResList().
            get(selectedRowIndex).getUserAcc()
        );
        // finally delete the user from customer directory*/
        //  ecosystem.getFCPDirectory().deleteFCPantry(selectedFCP);
        fcpid= ecosystem.getFCPIDirectory();
        fcpid.deleteFCPItems(selectedFCPI);
        ecosystem.setFCPIDirectory(fcpid);
        JOptionPane.showMessageDialog(this, "Pantry Item deleted Successfully");
        populatePantryItemsTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtWHnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWHnameFocusLost
        // TODO add your handling code here:
        if(!(txtWHname.getText().matches("^[a-zA-Z]*$"))){
            lblFCPmg.setText("Invalid input. Please enter only alphabets");
        }
        else{
            lblFCPmg.setText("");
        }
    }//GEN-LAST:event_txtWHnameFocusLost

    private void txtWHnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWHnameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWHnameKeyReleased

    private void txtFCPnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFCPnameFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFCPnameFocusLost

    private void txtFCPnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFCPnameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFCPnameKeyReleased

    private void txtFCPmgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFCPmgFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFCPmgFocusLost

    private void txtFCPmgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFCPmgKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFCPmgKeyReleased

    private void txtFDitemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFDitemFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFDitemFocusLost

    private void txtFDitemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFDitemKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFDitemKeyReleased

    private void txtItemquanFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemquanFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemquanFocusLost

    private void txtItemquanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemquanKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemquanKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblitems.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a record to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblitems.getModel();
        String FCPid=lblitemId1.getText();
        ArrayList<FCPantryItems> fcpiList = ecosystem.getFCPIDirectory().getFcpiList();
        for(FCPantryItems f: fcpiList)
        {
            if(f.getFcpitemid().equals(FCPid))
            {
                f.setFcpWHname(txtWHname.getText());
                f.setPantryName(txtFCPname.getText());
                f.setPantryManager(txtFCPmg.getText());
                f.setFoodItem(txtFDitem.getText());
                f.setFoodQuan(Integer.parseInt(txtItemquan.getText()));
                //UserAccount FCPua=new UserAccount();
                //FCPua.setUsername(txtFCPuname.getText());
                //FCPua.setPassword(txtFCPpwd.getText());
                //f.setFcpAccount(FCPua);
            }

        } 
        // ecosystem.setFCWDirectory(fcwList);
        JOptionPane.showMessageDialog(this, "Pantry Item details updated successfully");
        clearfields();
        populatePantryItemsTable();
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddWHTitle;
    private javax.swing.JLabel lblFCPmg;
    private javax.swing.JLabel lblFCPname;
    private javax.swing.JLabel lblFDitem;
    private javax.swing.JLabel lblFDitem1;
    private javax.swing.JLabel lblWHname;
    private javax.swing.JLabel lblitemId;
    private javax.swing.JLabel lblitemId1;
    private javax.swing.JTable tblitems;
    private javax.swing.JTextField txtFCPmg;
    private javax.swing.JTextField txtFCPname;
    private javax.swing.JTextField txtFDitem;
    private javax.swing.JTextField txtItemquan;
    private javax.swing.JTextField txtWHname;
    // End of variables declaration//GEN-END:variables

    private void populatePantryItemsTable() {
         DefaultTableModel model = (DefaultTableModel) tblitems.getModel();
        model.setRowCount(0);
        for(FCPantryItems fcpi: ecosystem.getFCPIDirectory().getFcpiList()){
           Object[] row = new Object[6];
           row[0] =fcpi;
           row[1] =fcpi.getFcpWHname();
           row[2] =fcpi.getPantryName();
           row[3] =fcpi.getPantryManager();
           row[4] =fcpi.getFoodItem();
           row[5] =fcpi.getFoodQuan();
           model.addRow(row);
        } 
    }

    private void clearfields() {
        txtWHname.setText("");
        txtFCPname.setText("");
        txtFCPmg.setText("");
        txtFDitem.setText("");
        txtItemquan.setText("");
    }
}
